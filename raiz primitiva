#include<bits/stdc++.h>
#include<iostream>
using namespace std;

int modulo(int a, int n)
{
  int q,r;
  
  if (a > 0)
  {
    q = a / n;
    r = a - q*n;
  }

  else
  {
    q = a / n;
    r = (q*n)-a;
    r=n-r;
    q=q-1;
  }

  return r;
  
}

bool comp(int n)
{
	if (n <= 1) 
  {
    return false;
  }

	if (n <= 3) 
  {
    return true;
  }


	if (modulo(n,2) == 0 || modulo(n,3) == 0) 
  {
    return false;
  }

	for (int i=5; i*i<=n; i=i+6)
  {
		if (modulo(n,i) == 0 || modulo(n,(i+2)) == 0)
		{
      return false;
    }
  }

	return true;
}


int pow(int base, int exp, int n)
{
	int x = 1; 
	vector<int>mods;
	vector<int>exponentes;
	mods.push_back(modulo(base, n));
	int resultado = mods[0];
	int pos = 0;
	int ite = 1;
	while (exp > 0)
	{
		int bit = modulo(exp, 2);
		if (ite > 1)
		{
			int mod_anterior = mods[pos];
			int aux = modulo(pow(mod_anterior, 2), n);
			mods.push_back(aux);
			pos++;
			if (bit)
			{
				int n1, n2;
				n1 = modulo(resultado, n);
				n2 = modulo(mods[pos], n);
				resultado = modulo(n1 * n2, n);
			}
		}
		exp /= 2;
		x *= 2;
		ite++;
	}
	return resultado;
}


void fac(unordered_set<int> &s, int n)
{

	while (modulo(n,2) == 0)
	{
		s.insert(2);
		n = n/2;
	}


	for (int i = 3; i <= sqrt(n); i = i+2)
	{
		while (modulo(n,i) == 0)
		{
			s.insert(i);
			n = n/i;
		}
	}


	if (n > 2)
	{
    s.insert(n);
  }
}


int prim(int n)
{
	unordered_set<int> s;

	if (comp(n)==false)
	{
    return 0;
  }

	int phi = n-1;

	fac(s, phi);

	for (int r=2; r<=phi; r++)
	{
		
		bool f = false;
		for (auto it = s.begin(); it != s.end(); it++)
		{

			if (pow(r, phi/(*it), n) == 1)
			{
				f = true;
				break;
			}
		}

		
		if (f == false)
		return r;
	}
	return 0;
}


int main()
{
	int n = 100049;
  
	cout << "la raiz primitiva mas pequeÃ±a de " << n << " es " << prim(n);
	
}
