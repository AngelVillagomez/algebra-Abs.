#include <iostream>

#include <vector>
#include <math.h>
#include <boost/multiprecision/cpp_int.hpp>
#include<chrono>
using namespace std;

int modulo(int a, int n)
{
	int r = a - ((a / n) * n);
	if (r < 0)
	{
		r = a - (((a / n) - 1) * n);
	}
	return r;
}

#include <math.h>         // for pow()
#include <stdlib.h>       // for drand48()

long randomrange(int n)
{
    
    long range_start = pow(10,n-1);
    long range_size = pow(10,n)-range_start;
  
    return range_start + long(drand48() * range_size);
}


int muti_mod(int a, int b, int c)
{
    a %= c;
    b %= c;
    int ret = 0;
    while (b)
    {
        if (b & 1)
        {
            ret += a;
            if (ret >= c) ret -= c;
        }
        a <<= 1;
        if (a >= c) a -= c;
        b >>= 1;
    }
    return ret;
}




int exp_modular(int base, int exp, int n)
{	
	int x = 1; //x es el exponente aux de la base
	vector<int>mods;
	vector<int>exponentes;
	mods.push_back(modulo(base, n));//Se inicializa el array 
	int resultado=mods[0];
	int pos=0;
	int ite = 1;
	while (exp>0)
	{
		int bit = modulo(exp, 2);	
		if (ite > 1)
		{
			int mod_anterior = mods[pos];
			int aux = modulo(pow(mod_anterior, 2), n);
			mods.push_back(aux);
			pos++;
			if (bit)
			{
				int n1, n2;
				n1 = modulo(resultado, n);
				n2 = modulo(mods[pos], n);
				resultado = modulo(n1 * n2, n);
			}
		}
		exp /= 2;
		x *= 2;
		ite++;
	}
	return resultado;
}

bool witness(int a, int n, int t, int u) 
{
    int ret = exp_modular(a, u, n);
    int last = ret;
    for (int i = 1; i <= t; i++)
    {
        ret = muti_mod(ret, ret, n);
        if (ret == 1 && last != 1 && last != n - 1) 
            return 1;
        last = ret;
    }
    if (ret != 1) return 1;
    return 0;
}


bool millerTest(int n,int S=40) 
{
    
    if(n==2) return 0;

    int u = n - 1, t = 0;
    while ((u & 1) == 0) 
        u >>= 1, t++;
    
    if (t == 0) return 1; 
    for (int k = 0; k < S; k++)
    {
        int a = rand() % (n - 1) + 1;
        if (witness(a, n, t, u))
            return 1;
    }
    return 0;
}

int generate(int b)
{
  int   n =randomrange(4) ;//no encontre una funcion de c++ que me diera los numeros random con un rango de bits asi que busque en internet y esto es lo mas parecido
  long long m=pow(2,b-1);
  n=n|m;
  return n;
}

int generateprime(int b)
{
  int n = generate(b);
  while(millerTest(n)==true)
  {
    n=n+2;
  }
  return n;
}

int main() 
{
  for(int i=100;i<=999;i++)
  {
    if(millerTest(i)==false){cout<<i<<"->"<<"si es"<<endl;} 
  }

  //SE DEMORA MUCHO PROFE, NO LO PRUEBE EN SU COMPUTADORA, MEJOR MIRE LOS RESULTADOS EN EL PDF DONDE LE ENVIE LOS LINKS :c
  for(int i=0;i<100;i++)
  {
    cout<<"primo numero "<<i<<": "<<generateprime(10)<<endl;
  }
  
}
